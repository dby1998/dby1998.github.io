<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>段宝玥</title>
    <description>欢迎来到我的个人站~</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 20 Nov 2019 23:41:21 +0800</pubDate>
    <lastBuildDate>Wed, 20 Nov 2019 23:41:21 +0800</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title></title>
        <description>&lt;p&gt;廖雪峰网站详细介绍了Git&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/896043488029600&quot;&gt;https://www.liaoxuefeng.com/wiki/896043488029600&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Git:分布式版本控制系统&lt;/p&gt;

&lt;p&gt;GitHub网站为开源项目免费提供Git存储&lt;/p&gt;

&lt;h1 id=&quot;安装git&quot;&gt;安装Git&lt;/h1&gt;

&lt;p&gt;查看是否安装Git   输入命令git看是否有帮助信息
在终端输入   &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install git&lt;/code&gt;安装Git 
安装完之后需要输入自己的名字和邮箱
&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global user.name &quot;Your Name&quot;&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --blobal user.email &quot;email@example.com&quot;&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;集中式与分布式版本控制系统&quot;&gt;集中式与分布式版本控制系统&lt;/h1&gt;

&lt;h2 id=&quot;集中式版本控制系统&quot;&gt;集中式版本控制系统&lt;/h2&gt;
&lt;p&gt;版本库是集中存放在中央服务器，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。&lt;/p&gt;

&lt;p&gt;集中式版本控制系统最大的毛病就是必须联网才能工作如果网速慢的话，读取速度慢&lt;/p&gt;

&lt;h2 id=&quot;分布式版本控制系统&quot;&gt;分布式版本控制系统&lt;/h2&gt;
&lt;p&gt;分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。&lt;/p&gt;

&lt;p&gt;和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库&lt;/p&gt;

&lt;p&gt;在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。&lt;/p&gt;

&lt;h1 id=&quot;创建版本库&quot;&gt;创建版本库&lt;/h1&gt;

&lt;p&gt;版本库：版本库又名仓库，英文名repository，简单的理解为目录，这个目录里面的所有文件都可以被Git管理，每个文件的修改、删除、Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”&lt;/p&gt;

&lt;h1 id=&quot;git命令&quot;&gt;Git命令&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令&lt;/th&gt;
      &lt;th&gt;功能&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mkdir  文件名&lt;/td&gt;
      &lt;td&gt;新建文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cd&lt;/td&gt;
      &lt;td&gt;进入文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pwd&lt;/td&gt;
      &lt;td&gt;显示当前目录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git init&lt;/td&gt;
      &lt;td&gt;把这个当前目录变成git可以管理的仓库&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git add (文件)&lt;/td&gt;
      &lt;td&gt;把文件添加到仓库&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git commit -m “说明”&lt;/td&gt;
      &lt;td&gt;把文件提交到仓库&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git log [–pretty=oneline]&lt;/td&gt;
      &lt;td&gt;查看历史记录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git reset –hard HEAD^&lt;/td&gt;
      &lt;td&gt;回到上一个版本(^^回到上上一个版本以此类推)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git reset –hard (commit ID 号)&lt;/td&gt;
      &lt;td&gt;返回到指定的版本&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git status&lt;/td&gt;
      &lt;td&gt;查看状态&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git checkout &lt;文件名&gt;&lt;/文件名&gt;&lt;/td&gt;
      &lt;td&gt;丢弃工作区的改动&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git reset HEAD &lt;文件名&gt;&lt;/文件名&gt;&lt;/td&gt;
      &lt;td&gt;取消暂存，回到工作区&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git rm &lt;文件名&gt;&lt;/文件名&gt;&lt;/td&gt;
      &lt;td&gt;删除文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git commit -m&lt;/td&gt;
      &lt;td&gt;删除提交到分支&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;commit在Git里被称为快照，一旦文件改乱了，或者误删了文件，可以从最近的一个commit恢复，然后继续工作，而不是把文件全部丢失&lt;/p&gt;

&lt;h1 id=&quot;工作区与暂存区&quot;&gt;工作区与暂存区&lt;/h1&gt;

&lt;p&gt;新建一个目录，将这个目录变为&lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;可以管理的仓库，在这个仓库里新建文件/编辑内容&lt;code class=&quot;highlighter-rouge&quot;&gt;(vim 文件名)&lt;/code&gt;，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git add  (文件名)&lt;/code&gt;将这个文件添加到暂存区，然后使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;说明&quot;&lt;/code&gt; 将暂存区的所有内容提交到分支
因为我们创建Git库时，Git自动为我们创建了唯一一个&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支，所以现在&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;就是往&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支上提交修改&lt;/p&gt;

&lt;h1 id=&quot;远程仓库-github&quot;&gt;远程仓库 github&lt;/h1&gt;
&lt;p&gt;在继续阅读后续内容前，请自行注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：&lt;/p&gt;

&lt;p&gt;第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen -t rsa -C &quot;自己的邮箱地址&quot;&lt;/code&gt; 
一直回车下去，如果一切顺利的话，可以在用户主目录里找到&lt;code class=&quot;highlighter-rouge&quot;&gt;.ssh&lt;/code&gt;目录，里面有&lt;code class=&quot;highlighter-rouge&quot;&gt;id_rsa&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;id_rsa.pub&lt;/code&gt;两个文件，这两个就是SSH Key的秘钥对，&lt;code class=&quot;highlighter-rouge&quot;&gt;id_rsa&lt;/code&gt;是私钥，不能泄露出去，&lt;code class=&quot;highlighter-rouge&quot;&gt;id_rsa.pub&lt;/code&gt;是公钥，可以放心地告诉任何人。&lt;/p&gt;

&lt;p&gt;第二步: 登录GigHub，打开“Account settings”，“SSH Keys”页面
然后，点“Add SSH Key”，填上任意Title，在Key文本狂粘贴id_rsa.pub文件内容&lt;/p&gt;

&lt;h2 id=&quot;添加远程库&quot;&gt;添加远程库&lt;/h2&gt;

&lt;p&gt;在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这俩个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库写作&lt;/p&gt;

&lt;p&gt;首先，登录GitHub，在右上角找到“Create a new repo”按钮，创建一个新的仓库：&lt;/p&gt;

&lt;p&gt;在Repository name 填入&lt;code class=&quot;highlighter-rouge&quot;&gt;learngit&lt;/code&gt;,其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：&lt;/p&gt;

&lt;p&gt;目前，在GitHub上的这个&lt;code class=&quot;highlighter-rouge&quot;&gt;learngit&lt;/code&gt;仓库还是空的，GitHub可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与子关联，然后，把本地仓库的内容推送到GitHub仓库&lt;/p&gt;

&lt;p&gt;在本地的&lt;code class=&quot;highlighter-rouge&quot;&gt;learngit&lt;/code&gt;仓库下运行命令：
&lt;code class=&quot;highlighter-rouge&quot;&gt;git remoteaddorigingit@github.com:(GitHub账户名)/learngit.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;添加后，远程库的名字就是&lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;，这是Git默认的叫法，也可以改成别的，但是&lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;这个名字一看就知道是远程库。&lt;/p&gt;

&lt;p&gt;下一步，就可以把本地库的所有内容推送到远程库上
&lt;code class=&quot;highlighter-rouge&quot;&gt;git push -u origin master&lt;/code&gt;
把本地的内容推送到远程，用&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;命令，实际上是吧当前分支&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;推送到远程&lt;/p&gt;

&lt;p&gt;由于远程库是空的，我们第一次推送&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支时，加上&lt;code class=&quot;highlighter-rouge&quot;&gt;-u&lt;/code&gt;参数，Git不但会把本地的&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支内容推送的远程新的&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支，还会把本地的&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支和远程的&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支关联起来，在以后的推送就可以简化命令使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin master&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;总结：
要关联一个远程库，使用命令&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add origin git@server-name:path/repo-name.git&lt;/code&gt;；
关联后，使用命令&lt;code class=&quot;highlighter-rouge&quot;&gt;git push -u origin master&lt;/code&gt;第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin master&lt;/code&gt;推送最新修改；&lt;/p&gt;

&lt;h2 id=&quot;远程库克隆&quot;&gt;远程库克隆&lt;/h2&gt;

&lt;p&gt;登录GitHub，创建一个新的仓库，名字叫&lt;code class=&quot;highlighter-rouge&quot;&gt;gitskills&lt;/code&gt;
勾选&lt;code class=&quot;highlighter-rouge&quot;&gt;Initialize this repository with a README&lt;/code&gt;这样GitHub会自动为我们创建 一个TEADME.md文件&lt;/p&gt;

&lt;p&gt;现在，远程库已经准备好了，下一步是用命令&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt;克隆一个本地库
&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone git@github.com:michaelliao/gitskills.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;注意:把Git库换成自己的，然后进入&lt;code class=&quot;highlighter-rouge&quot;&gt;gitskills&lt;/code&gt;目录,查看
&lt;code class=&quot;highlighter-rouge&quot;&gt;cd gitskills&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;分支管理&quot;&gt;分支管理&lt;/h1&gt;

&lt;p&gt;每次提交，Git都把他们当做一条时间线，这段时间线就是一个分支。只有一条时间线，在Git里，这个分支叫主分区，即&lt;code class=&quot;highlighter-rouge&quot;&gt;mester&lt;/code&gt;分支，&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;严格来说不是指向提交，而是指向了&lt;code class=&quot;highlighter-rouge&quot;&gt;mester&lt;/code&gt;分支，&lt;code class=&quot;highlighter-rouge&quot;&gt;mester&lt;/code&gt;指向了提交，所以，&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;指向的就是当前分支&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支是一条线，Git用&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;指向最新的提交，再用&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;指向&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;，就能确定当前的分支，以及当前分支的提交点&lt;/p&gt;

&lt;p&gt;当我们创建新的分支，Git新建了一个指针&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;，指向&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;相同的提交，再把&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;指向&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;
新建分支&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch (dev)&lt;/code&gt;  &lt;br /&gt;
新建分支及切换分支&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch -b (分支名)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;创建好分支后可以切换分支，&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;指向新建的分支&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;，比如在&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;新提交一次修改，&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;指针往前一步，而&lt;code class=&quot;highlighter-rouge&quot;&gt;mester&lt;/code&gt;指针不动
切换分支 &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout (分支名)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我们在&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;分支上进行的修改，所以在&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支上看不到，要想在&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;上看到修改后的内容，需要合并分支&lt;/p&gt;

&lt;p&gt;假如我们在&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;上的工作完成了，就可以把&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;合并到&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;上
合并分支&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge dev&lt;/code&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;分支命令&lt;/th&gt;
      &lt;th&gt;作用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;git branch&lt;/td&gt;
      &lt;td&gt;查看分支&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git branch&amp;lt;name&amp;gt;&lt;/td&gt;
      &lt;td&gt;创建分支&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git checkout &amp;lt;name&amp;gt;&lt;/td&gt;
      &lt;td&gt;切换分支&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git checkout -b &amp;lt;name&amp;gt;&lt;/td&gt;
      &lt;td&gt;创建\切换分支&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git merge &amp;lt;name&amp;gt;&lt;/td&gt;
      &lt;td&gt;合并分支&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git branch -d &amp;lt;name&amp;gt;&lt;/td&gt;
      &lt;td&gt;删除分支&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git log –graph&lt;/td&gt;
      &lt;td&gt;查看分支合并图&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;解决冲突&quot;&gt;解决冲突&lt;/h2&gt;

&lt;p&gt;当在分支上做出修改后,没有和主分支&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;进行合并的前提下,主分支进行了修改,由于俩次分支修改的在同一个位置,合并分支会起冲突,不知道那个分支修改的内容在当前位置,所有需要手动去修改(修改成我们希望的内容),解决冲突后,再提交,合并完成(如果俩次修改的内容不在同一个位置,就不会起冲突,可以正常合并)&lt;/p&gt;

&lt;h2 id=&quot;分支管理策略&quot;&gt;分支管理策略&lt;/h2&gt;

&lt;p&gt;分支策略:首先，&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；&lt;/p&gt;

&lt;p&gt;那在哪干活呢？干活都在&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;分支上，也就是说，&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;分支是不稳定的，到某个时候，比如1.0版本发布时，再把&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;分支合并到&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;上，在&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支发布1.0版本；&lt;/p&gt;

&lt;p&gt;你和你的小伙伴们每个人都在&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;分支上干活，每个人都有自己的分支，时不时地往&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;分支上合并就可以了&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;:合并分支时,使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git merge --on-ff -m&quot;说名&quot; &amp;lt;分支&amp;gt; &lt;/code&gt;参数就可以用普通模式合并,合并后的历史有分支,能看出来曾经做过合并,而使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge &amp;lt;分支&amp;gt;&lt;/code&gt; 合并看不出来曾经做过合并&lt;/p&gt;

&lt;h2 id=&quot;bug分支&quot;&gt;BUG分支&lt;/h2&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;分支下正在工作的时候,&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支有任务需要修复一下,而&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;分支无法中断工作,需要把&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;分支的内容&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;到暂存区,然后隐藏起来&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash&lt;/code&gt;,然后在新建一个分支去修复&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支的BUG,修复完成后,切换到&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支,完成合并,删除这个分支,回到&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;分支,把刚才隐藏的工作恢复过来同时把stash内容删除掉&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash apply&lt;/code&gt;恢复,但恢复过来,stash内容并不删除,需要用&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash drop&lt;/code&gt;来删除      &lt;code class=&quot;highlighter-rouge&quot;&gt;git stash pop&lt;/code&gt;恢复同时删除stash内容&lt;/p&gt;

&lt;p&gt;在master分支上修复的bug，想要合并到当前dev分支，可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;git cherry-pick \&amp;lt;commit ID\&amp;gt;&lt;/code&gt;命令，把bug提交的修改“复制”到当前分支，避免重复劳动。&lt;/p&gt;

&lt;h2 id=&quot;feature-分支&quot;&gt;Feature 分支&lt;/h2&gt;

&lt;p&gt;当一个&lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;修改的内容提交到分支,需要将这个分支进行删除(此时没有合并),用普通的-d删除不了,需要`git branch -D dev进行强制删除&lt;/p&gt;

&lt;h2 id=&quot;多人协作&quot;&gt;多人协作&lt;/h2&gt;
&lt;p&gt;此网站详细介绍了多人协作的流程&lt;a href=&quot;https://www.cnblogs.com/onelikeone/p/6857910.html&quot;&gt;https://www.cnblogs.com/onelikeone/p/6857910.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;用于团队开发,当a,b俩用户需要进行开发一个项目,同时把仓库克隆下来,a用户编辑后进行推送&lt;code class=&quot;highlighter-rouge&quot;&gt;git push master&lt;/code&gt; ,此时仓库为最新版本,而b用户往仓库推送会发生冲突(仓库发生了变化,为最新版本,而b用户现在的文件和当时克隆下来的文件不一样,所以会导致冲突),解决冲突(拉取最新版本&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt;)然后再进行推送&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令&lt;/th&gt;
      &lt;th&gt;作用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;git remote&lt;/td&gt;
      &lt;td&gt;查看远程库的信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git remote -v&lt;/td&gt;
      &lt;td&gt;显示更详细的信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git push origin&lt;/td&gt;
      &lt;td&gt;推送分支&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git pull&lt;/td&gt;
      &lt;td&gt;抓取最新版本&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;标签&quot;&gt;标签&lt;/h1&gt;

&lt;p&gt;发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照,Git的标签虽然是版本库的快照,但其实它就是指向某个commit的指针&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;标签命令&lt;/th&gt;
      &lt;th&gt;作用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;git tag v1 commit ID&lt;/td&gt;
      &lt;td&gt;根据commit ID 打标签&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git tag v2&lt;/td&gt;
      &lt;td&gt;打当前版本标签&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git tag&lt;/td&gt;
      &lt;td&gt;查看所有标签&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git log –pretty=oneline –abbrev-commit&lt;/td&gt;
      &lt;td&gt;查看历史提交的commit id&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git show v1&lt;/td&gt;
      &lt;td&gt;可以看到说明文字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git tag -d v1&lt;/td&gt;
      &lt;td&gt;删除标签&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git push origin v1&lt;/td&gt;
      &lt;td&gt;推送标签到远程&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git push origin –tags&lt;/td&gt;
      &lt;td&gt;推送所有未推送的标签到远程&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;如果想要删除远程标签,先从本地删除&lt;code class=&quot;highlighter-rouge&quot;&gt;git tag -d v1&lt;/code&gt;,然后再删除远程&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin :refs/tags/v1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;可以同时关联github和gitee库&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add&lt;/code&gt;把它和码云的远程库关联：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add origin git@gitee.com:liaoxuefeng/learngit.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;git add -f  强制添加文件&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Nov 2019 23:41:21 +0800</pubDate>
        <link>http://localhost:4000/2019/11/2019-11-20-Git/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/11/2019-11-20-Git/</guid>
        
        
      </item>
    
  </channel>
</rss>
